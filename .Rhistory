)
}
hlines_print <- list(
add_hline(7, "a0bddc"),
add_hline(20, "8b96c9"),
add_hline(40, "8d6cb0"),
add_hline (70, "8a419e"),
add_hline (150, "6c1769"))
modify_legend <- list(
borderwidth = 1,
y = .5,
title=list(text='<b> Municipality </b>',
x = 0.5))
date_range_print <- list(
text = paste ("Dates:",as.Date(input$daterange1[1]),"to", as.Date(input$daterange1[2])),
xref = "paper",
yref = "paper",
yanchor = "bottom",
xanchor = "center",
align = "center",
x = 0.5,
y = 1.04,
showarrow = FALSE
)
time_frame <- round ((as.Date(input$daterange1[2]) - as.Date(input$daterange1[1])) / 7, 1)
time_frame_print <- list(
text = paste ("Time Frame:",time_frame,"Weeks"),
xref = "paper",
yref = "paper",
yanchor = "bottom",
xanchor = "center",
align = "center",
x = 0.5,
y = .985,
showarrow = FALSE
)
risk_levels_print <- list(
source = base64enc::dataURI(file = "risk_levels.png"),
x = .5, y = -0.356,
sizex = 1, sizey = 1,
xref = "paper", yref = "paper",
xanchor = "center", yanchor = "bottom"
)
plot_ly (data = dat_selected,
x = ~date,
y = ~value,
name = ~as.factor(municipality),
type = "scatter",
mode = "lines",
linetype = ~I(linetype),
color = ~I(color),
yaxis = list (title = 'Incidence\n7-day average (cases/million/day)')) %>%
layout (shapes = hlines_print,
xaxis = list(title = "Date"),
yaxis = list(title = paste0 ("Incidence\n",input$calculatedincidence," (cases/million/day)"),
autotick = F,
dtick = 50),
title =  list (text = "Plymouth & Canton Incidence", xref = 'paper',x = .5),
annotations = list(date_range_print, time_frame_print),
legend = modify_legend,
showlegend = T,
images = risk_levels_print,
margin = list(t = 60,
b = 90)
)
add_hline <- function(y = 0, color = "blue") {
list(
type = "line",
x0 = 0,
x1 = 1,
xref = "paper",
y0 = y,
y1 = y,
line = list(color = color)
)
}
hlines_print <- list(
add_hline(7, "a0bddc"),
add_hline(20, "8b96c9"),
add_hline(40, "8d6cb0"),
add_hline (70, "8a419e"),
add_hline (150, "6c1769"))
modify_legend <- list(
borderwidth = 1,
y = .5,
title=list(text='<b> Municipality </b>',
x = 0.5))
date_range_print <- list(
text = paste ("Dates:",as.Date(input$daterange1[1]),"to", as.Date(input$daterange1[2])),
xref = "paper",
yref = "paper",
yanchor = "bottom",
xanchor = "center",
align = "center",
x = 0.5,
y = 1.04,
showarrow = FALSE
)
time_frame <- round ((as.Date(input$daterange1[2]) - as.Date(input$daterange1[1])) / 7, 1)
time_frame_print <- list(
text = paste ("Time Frame:",time_frame,"Weeks"),
xref = "paper",
yref = "paper",
yanchor = "bottom",
xanchor = "center",
align = "center",
x = 0.5,
y = .985,
showarrow = FALSE
)
risk_levels_print <- list(
source = base64enc::dataURI(file = "risk_levels.png"),
x = .5, y = -0.356,
sizex = 1, sizey = 1,
xref = "paper", yref = "paper",
xanchor = "center", yanchor = "bottom"
)
plot_ly (data = dat_selected,
x = ~date,
y = ~value,
name = ~as.factor(municipality),
type = "scatter",
mode = "lines",
linetype = ~I(linetype),
color = ~I(color),
yaxis = list (title = 'Incidence\n7-day average (cases/million/day)')) %>%
layout (shapes = hlines_print,
xaxis = list(title = "Date"),
yaxis = list(title = paste0 ("Incidence\n",input$calculatedincidence," (cases/million/day)"),
autotick = F,
dtick = 50),
title =  list (text = "Plymouth & Canton Incidence", xref = 'paper',x = .5),
annotations = list(date_range_print, time_frame_print),
legend = modify_legend,
showlegend = T,
images = risk_levels_print,
margin = list(t = 60,
b = 90)
)
add_hline <- function(y = 0, color = "blue") {
list(
type = "line",
x0 = 0,
x1 = 1,
xref = "paper",
y0 = y,
y1 = y,
line = list(color = color)
)
}
hlines_print <- list(
add_hline(7, "a0bddc"),
add_hline(20, "8b96c9"),
add_hline(40, "8d6cb0"),
add_hline (70, "8a419e"),
add_hline (150, "6c1769"))
modify_legend <- list(
borderwidth = 1,
y = .5,
title=list(text='<b> Municipality </b>',
x = 0.5))
date_range_print <- list(
# text = paste ("Dates:",as.Date(input$daterange1[1]),"to", as.Date(input$daterange1[2])),
xref = "paper",
yref = "paper",
yanchor = "bottom",
xanchor = "center",
align = "center",
x = 0.5,
y = 1.04,
showarrow = FALSE
)
# time_frame <- round ((as.Date(input$daterange1[2]) - as.Date(input$daterange1[1])) / 7, 1)
time_frame_print <- list(
# text = paste ("Time Frame:",time_frame,"Weeks"),
xref = "paper",
yref = "paper",
yanchor = "bottom",
xanchor = "center",
align = "center",
x = 0.5,
y = .985,
showarrow = FALSE
)
risk_levels_print <- list(
source = base64enc::dataURI(file = "risk_levels.png"),
x = .5, y = -0.356,
sizex = 1, sizey = 1,
xref = "paper", yref = "paper",
xanchor = "center", yanchor = "bottom"
)
plot_ly (data = dat_selected,
x = ~date,
y = ~value,
name = ~as.factor(municipality),
type = "scatter",
mode = "lines",
linetype = ~I(linetype),
color = ~I(color),
yaxis = list (title = 'Incidence\n7-day average (cases/million/day)')) %>%
layout (shapes = hlines_print,
xaxis = list(title = "Date"),
# yaxis = list(title = paste0 ("Incidence\n",input$calculatedincidence," (cases/million/day)"),
#              autotick = F,
#              dtick = 50),
title =  list (text = "Plymouth & Canton Incidence", xref = 'paper',x = .5),
# annotations = list(date_range_print, time_frame_print),
legend = modify_legend,
showlegend = T,
images = risk_levels_print,
margin = list(t = 60,
b = 90)
)
plot_ly (data = dat_selected,
x = ~date,
y = ~value,
name = ~as.factor(municipality),
type = "scatter",
mode = "lines",
linetype = ~I(linetype),
color = ~I(color),
yaxis = list (title = 'Incidence\n7-day average (cases/million/day)')) %>%
layout (shapes = hlines_print,
xaxis = list(title = "Date"),
# yaxis = list(title = paste0 ("Incidence\n",input$calculatedincidence," (cases/million/day)"),
#              autotick = F,
#              dtick = 50),
title =  list (text = "Plymouth & Canton Incidence", xref = 'paper',x = .5),
# annotations = list(date_range_print, time_frame_print),
legend = modify_legend,
showlegend = T,
images = risk_levels_print,
margin = list(t = 60,
b = 90)
) %>%
config (modeBarButtonsToRemove = c("zoomIn2d"))
plot_ly (data = dat_selected,
x = ~date,
y = ~value,
name = ~as.factor(municipality),
type = "scatter",
mode = "lines",
linetype = ~I(linetype),
color = ~I(color),
yaxis = list (title = 'Incidence\n7-day average (cases/million/day)')) %>%
layout (shapes = hlines_print,
xaxis = list(title = "Date"),
# yaxis = list(title = paste0 ("Incidence\n",input$calculatedincidence," (cases/million/day)"),
#              autotick = F,
#              dtick = 50),
title =  list (text = "Plymouth & Canton Incidence", xref = 'paper',x = .5),
# annotations = list(date_range_print, time_frame_print),
legend = modify_legend,
showlegend = T,
images = risk_levels_print,
margin = list(t = 60,
b = 90)
) %>%
config ()
install.packages ("plotly.js")
plot_ly (data = dat_selected,
x = ~date,
y = ~value,
name = ~as.factor(municipality),
type = "scatter",
mode = "lines",
linetype = ~I(linetype),
color = ~I(color),
yaxis = list (title = 'Incidence\n7-day average (cases/million/day)')) %>%
layout (shapes = hlines_print,
xaxis = list(title = "Date"),
# yaxis = list(title = paste0 ("Incidence\n",input$calculatedincidence," (cases/million/day)"),
#              autotick = F,
#              dtick = 50),
title =  list (text = "Plymouth & Canton Incidence", xref = 'paper',x = .5),
# annotations = list(date_range_print, time_frame_print),
legend = modify_legend,
showlegend = T,
images = risk_levels_print,
margin = list(t = 60,
b = 90)
) %>%
config (displayModeBar = F)
plot_ly (data = dat_selected,
x = ~date,
y = ~value,
name = ~as.factor(municipality),
type = "scatter",
mode = "lines",
linetype = ~I(linetype),
color = ~I(color),
yaxis = list (title = 'Incidence\n7-day average (cases/million/day)')) %>%
layout (shapes = hlines_print,
xaxis = list(title = "Date"),
# yaxis = list(title = paste0 ("Incidence\n",input$calculatedincidence," (cases/million/day)"),
#              autotick = F,
#              dtick = 50),
title =  list (text = "Plymouth & Canton Incidence", xref = 'paper',x = .5),
# annotations = list(date_range_print, time_frame_print),
legend = modify_legend,
showlegend = T,
images = risk_levels_print,
margin = list(t = 60,
b = 90)
) %>%
config (modeBarButtonsToRemove = c("toggleSpikelines"))
?plot_ly
schema()
install.packages ("listviewer")
library (listviewer)
schema()
plot_ly (data = dat_selected,
x = ~date,
y = ~value,
name = ~as.factor(municipality),
type = "scatter",
mode = "lines",
linetype = ~I(linetype),
color = ~I(color),
yaxis = list (title = 'Incidence\n7-day average (cases/million/day)')) %>%
layout (shapes = hlines_print,
xaxis = list(title = "Date"),
# yaxis = list(title = paste0 ("Incidence\n",input$calculatedincidence," (cases/million/day)"),
#              autotick = F,
#              dtick = 50),
title =  list (text = "Plymouth & Canton Incidence", xref = 'paper',x = .5),
# annotations = list(date_range_print, time_frame_print),
legend = modify_legend,
showlegend = T,
images = risk_levels_print,
margin = list(t = 60,
b = 90)
) %>%
config (displayModeBar = 1,
modeBarButtonsToRemove = c())
plot_ly (data = dat_selected,
x = ~date,
y = ~value,
name = ~as.factor(municipality),
type = "scatter",
mode = "lines",
linetype = ~I(linetype),
color = ~I(color),
yaxis = list (title = 'Incidence\n7-day average (cases/million/day)')) %>%
layout (shapes = hlines_print,
xaxis = list(title = "Date"),
# yaxis = list(title = paste0 ("Incidence\n",input$calculatedincidence," (cases/million/day)"),
#              autotick = F,
#              dtick = 50),
title =  list (text = "Plymouth & Canton Incidence", xref = 'paper',x = .5),
# annotations = list(date_range_print, time_frame_print),
legend = modify_legend,
showlegend = T,
images = risk_levels_print,
margin = list(t = 60,
b = 90)
) %>%
config (displayModeBar = 1,
modeBarButtonsToRemove = c("toImage"))
plot_ly (data = dat_selected,
x = ~date,
y = ~value,
name = ~as.factor(municipality),
type = "scatter",
mode = "lines",
linetype = ~I(linetype),
color = ~I(color),
yaxis = list (title = 'Incidence\n7-day average (cases/million/day)')) %>%
layout (shapes = hlines_print,
xaxis = list(title = "Date"),
# yaxis = list(title = paste0 ("Incidence\n",input$calculatedincidence," (cases/million/day)"),
#              autotick = F,
#              dtick = 50),
title =  list (text = "Plymouth & Canton Incidence", xref = 'paper',x = .5),
# annotations = list(date_range_print, time_frame_print),
legend = modify_legend,
showlegend = T,
images = risk_levels_print,
margin = list(t = 60,
b = 90)
) %>%
config (displayModeBar = 1,
modeBarButtonsToRemove = c("modeBarButtons.toImage"))
plot_ly (data = dat_selected,
x = ~date,
y = ~value,
name = ~as.factor(municipality),
type = "scatter",
mode = "lines",
linetype = ~I(linetype),
color = ~I(color),
yaxis = list (title = 'Incidence\n7-day average (cases/million/day)')) %>%
layout (shapes = hlines_print,
xaxis = list(title = "Date"),
# yaxis = list(title = paste0 ("Incidence\n",input$calculatedincidence," (cases/million/day)"),
#              autotick = F,
#              dtick = 50),
title =  list (text = "Plymouth & Canton Incidence", xref = 'paper',x = .5),
# annotations = list(date_range_print, time_frame_print),
legend = modify_legend,
showlegend = T,
images = risk_levels_print,
margin = list(t = 60,
b = 90)
) %>%
config (displayModeBar = 1,
modeBarButtonsToRemove = list("modeBarButtons.toImage"))
plot_ly (data = dat_selected,
x = ~date,
y = ~value,
name = ~as.factor(municipality),
type = "scatter",
mode = "lines",
linetype = ~I(linetype),
color = ~I(color),
yaxis = list (title = 'Incidence\n7-day average (cases/million/day)')) %>%
layout (shapes = hlines_print,
xaxis = list(title = "Date"),
# yaxis = list(title = paste0 ("Incidence\n",input$calculatedincidence," (cases/million/day)"),
#              autotick = F,
#              dtick = 50),
title =  list (text = "Plymouth & Canton Incidence", xref = 'paper',x = .5),
# annotations = list(date_range_print, time_frame_print),
legend = modify_legend,
showlegend = T,
images = risk_levels_print,
margin = list(t = 60,
b = 90)
) %>%
config (displayModeBar = 1,
modeBarButtonsToRemove = list("toggleSpikelines"))
plot_ly (data = dat_selected,
x = ~date,
y = ~value,
name = ~as.factor(municipality),
type = "scatter",
mode = "lines",
linetype = ~I(linetype),
color = ~I(color),
yaxis = list (title = 'Incidence\n7-day average (cases/million/day)')) %>%
layout (shapes = hlines_print,
xaxis = list(title = "Date"),
# yaxis = list(title = paste0 ("Incidence\n",input$calculatedincidence," (cases/million/day)"),
#              autotick = F,
#              dtick = 50),
title =  list (text = "Plymouth & Canton Incidence", xref = 'paper',x = .5),
# annotations = list(date_range_print, time_frame_print),
legend = modify_legend,
showlegend = T,
images = risk_levels_print,
margin = list(t = 60,
b = 90)
) %>%
config (displayModeBar = 1,
modeBarButtonsToRemove = list("hoverClosestCartesian"))
plot_ly (data = dat_selected,
x = ~date,
y = ~value,
name = ~as.factor(municipality),
type = "scatter",
mode = "lines",
linetype = ~I(linetype),
color = ~I(color),
yaxis = list (title = 'Incidence\n7-day average (cases/million/day)')) %>%
layout (shapes = hlines_print,
xaxis = list(title = "Date"),
# yaxis = list(title = paste0 ("Incidence\n",input$calculatedincidence," (cases/million/day)"),
#              autotick = F,
#              dtick = 50),
title =  list (text = "Plymouth & Canton Incidence", xref = 'paper',x = .5),
# annotations = list(date_range_print, time_frame_print),
legend = modify_legend,
showlegend = T,
images = risk_levels_print,
margin = list(t = 60,
b = 90)
) %>%
config (displayModeBar = 1,
modeBarButtonsToRemove = list("toggleSpikelines",
))
plot_ly (data = dat_selected,
x = ~date,
y = ~value,
name = ~as.factor(municipality),
type = "scatter",
mode = "lines",
linetype = ~I(linetype),
color = ~I(color),
yaxis = list (title = 'Incidence\n7-day average (cases/million/day)')) %>%
layout (shapes = hlines_print,
xaxis = list(title = "Date"),
# yaxis = list(title = paste0 ("Incidence\n",input$calculatedincidence," (cases/million/day)"),
#              autotick = F,
#              dtick = 50),
title =  list (text = "Plymouth & Canton Incidence", xref = 'paper',x = .5),
# annotations = list(date_range_print, time_frame_print),
legend = modify_legend,
showlegend = T,
images = risk_levels_print,
margin = list(t = 60,
b = 90)
) %>%
config (displayModeBar = 1,
modeBarButtonsToRemove = list("toggleSpikelines"))
schema()
runApp()
devtools::use_travis
devtools::build_readme()
runApp()
runApp()
runApp()
runApp()
